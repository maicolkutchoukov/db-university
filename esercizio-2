/* QUERY GROUP BY */

/* 1. Contare quanti iscritti ci sono stati ogni anno */

SELECT COUNT(id) AS studenti_iscritti, year(enrolment_date) AS anno
FROM `students`
GROUP BY year(enrolment_date);
-------------------------------------------------------------------------------------
/* 2. Contare gli insegnanti che hanno l'ufficio nello stesso edificio */

SELECT office_address, COUNT(id) 
FROM `teachers`
GROUP BY office_address;
-------------------------------------------------------------------------------------
/* 3. Calcolare la media dei voti di ogni appello d'esame */

SELECT exam_id, AVG(vote) 
FROM `exam_student`
GROUP BY exam_id;
-------------------------------------------------------------------------------------
/* 4. Contare quanti corsi di laurea ci sono per ogni dipartimento */

SELECT department_id, COUNT(name) AS numero_corsi
FROM `degrees`
GROUP BY department_id;
-------------------------------------------------------------------------------------


/* QUERY JOIN */

/* 1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia */

SELECT students.*
FROM `students` 
INNER JOIN degrees
ON students.degree_id = degrees.id
WHERE degrees.name = 'Corso di Laurea in Economia';

/* 2. Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di Neuroscienze */

SELECT degrees.name, departments.name 
FROM `degrees`
INNER JOIN departments
ON degrees.department_id = departments.id
WHERE departments.id = 7
AND degrees.name LIKE 'Corso di Laurea Magistrale%';

/* 3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44) */

SELECT teachers.name, teachers.surname, courses.name, courses.description 
FROM `teachers`
INNER JOIN course_teacher
ON teachers.id = course_teacher.teacher_id
INNER JOIN courses
ON course_teacher.course_id = courses.id
WHERE teachers.id = 44;

/* 4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e nome */

SELECT students.surname AS cognome_studente, students.name AS nome_studente, degrees.name AS nome_corso, departments.name AS nome_dipartimento
FROM `students`
INNER JOIN degrees
ON students.degree_id = degrees.id
INNER JOIN departments
ON degrees.department_id = departments.id
ORDER BY students.surname, students.name;

/* 5. Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti */

SELECT degrees.name AS nome_corso_laurea, 
courses.name AS nome_corso, 
teachers.name AS nome_insegnante, 
teachers.surname AS cognome_insegnante, 
departments.name AS nome_dipartimento 
FROM `degrees`
INNER JOIN courses
ON degrees.id = courses.degree_id
INNER JOIN course_teacher
ON course_teacher.course_id = courses.id
INNER JOIN teachers
ON course_teacher.teacher_id = teachers.id
INNER JOIN departments;


/* 6. Selezionare tutti i docenti che insegnano nel Dipartimento di Matematica (54) */

SELECT teachers.*, departments.name
FROM `departments`
INNER JOIN degrees
ON degrees.department_id = departments.id
INNER JOIN courses
ON courses.degree_id = degrees.id
INNER JOIN course_teacher
ON course_teacher.course_id = courses.id
INNER JOIN teachers
ON course_teacher.teacher_id = teachers.id
WHERE departments.name = 'Dipartimento di Matematica';


/* 7. BONUS: Selezionare per ogni studente il numero di tentativi sostenuti per ogni esame, stampando anche il voto massimo. Successivamente, filtrare i tentativi con voto minimo 18. */

SELECT students.name, students.surname, courses.name AS nome_corso, MAX(exam_student.vote) AS voto_max , COUNT(exam_student.exam_id) as totale_esami
FROM `students`
INNER JOIN exam_student
ON exam_student.student_id = students.id
INNER JOIN exams
ON exam_student.exam_id = exams.id
INNER JOIN courses
ON courses.id = exams.course_id
WHERE exam_student.vote > 18
GROUP BY students.id, exams.course_id;